#pragma once
#include <stdlib.h>
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

#define COMMUN_CONTRACTS "${CMAKE_BINARY_DIR}/../"
#define CYBERWAY_CONTRACTS "${CMAKE_BINARY_DIR}/../../cyberway.contracts/build/"

const std::string commun_contracts = getenv("COMMUN_CONTRACTS") ?: COMMUN_CONTRACTS;
const std::string cyberway_contracts = getenv("CYBERWAY_CONTRACTS") ?: CYBERWAY_CONTRACTS;

static inline std::vector<uint8_t> read_wasm(const std::string& filename) {return read_wasm(filename.c_str());}
static inline std::vector<char> read_abi(const std::string& filename) {return read_abi(filename.c_str());}

struct contracts {
    static std::vector<uint8_t> ctrl_wasm() { return read_wasm(commun_contracts + "/commun.ctrl/commun.ctrl.wasm"); }
    static std::vector<char>    ctrl_abi()  { return read_abi (commun_contracts + "/commun.ctrl/commun.ctrl.abi"); }

    static std::vector<uint8_t> point_wasm() { return read_wasm(commun_contracts + "/commun.point/commun.point.wasm"); }
    static std::vector<char>    point_abi()  { return read_abi (commun_contracts + "/commun.point/commun.point.abi"); }
    
    static std::vector<uint8_t> gallery_wasm() { return read_wasm(commun_contracts + "/commun.gallery/commun.gallery.wasm"); }
    static std::vector<char>    gallery_abi()  { return read_abi (commun_contracts + "/commun.gallery/commun.gallery.abi"); }
    
    static std::vector<uint8_t> emit_wasm() { return read_wasm(commun_contracts + "/commun.emit/commun.emit.wasm"); }
    static std::vector<char>    emit_abi()  { return read_abi (commun_contracts + "/commun.emit/commun.emit.abi"); }

    static std::vector<uint8_t> list_wasm() { return read_wasm(commun_contracts + "/commun.list/commun.list.wasm"); }
    static std::vector<char>    list_abi()  { return read_abi (commun_contracts + "/commun.list/commun.list.abi"); }

    static std::vector<uint8_t> social_wasm() { return read_wasm(commun_contracts + "/commun.social/commun.social.wasm"); }
    static std::vector<char>    social_abi()  { return read_abi (commun_contracts + "/commun.social/commun.social.abi"); }

    static std::vector<uint8_t> publication_wasm() { return read_wasm(commun_contracts + "/commun.publication/commun.publication.wasm"); }
    static std::vector<char>    publication_abi()  { return read_abi (commun_contracts + "/commun.publication/commun.publication.abi"); }

    static std::vector<uint8_t> recover_wasm() { return read_wasm(commun_contracts + "/commun.recover/commun.recover.wasm"); }
    static std::vector<char>    recover_abi()  { return read_abi (commun_contracts + "/commun.recover/commun.recover.abi"); }

    static std::vector<uint8_t> system_wasm() { return read_wasm(cyberway_contracts + "/cyber.system/cyber.system.wasm"); }
    static std::vector<char>    system_abi()  { return read_abi (cyberway_contracts + "/cyber.system/cyber.system.abi"); }
    static std::vector<uint8_t> token_wasm()  { return read_wasm(cyberway_contracts + "/cyber.token/cyber.token.wasm"); }
    static std::vector<char>    token_abi()   { return read_abi (cyberway_contracts + "/cyber.token/cyber.token.abi"); }
    static std::vector<uint8_t> msig_wasm()   { return read_wasm(cyberway_contracts + "/cyber.msig/cyber.msig.wasm"); }
    static std::vector<char>    msig_abi()    { return read_abi (cyberway_contracts + "/cyber.msig/cyber.msig.abi"); }
    static std::vector<uint8_t> wrap_wasm()   { return read_wasm(cyberway_contracts + "/cyber.wrap/cyber.wrap.wasm"); }
    static std::vector<char>    wrap_abi()    { return read_abi (cyberway_contracts + "/cyber.wrap/cyber.wrap.abi"); }
    static std::vector<uint8_t> bios_wasm()   { return read_wasm(cyberway_contracts + "/cyber.bios/cyber.bios.wasm"); }
    static std::vector<char>    bios_abi()    { return read_abi (cyberway_contracts + "/cyber.bios/cyber.bios.abi"); }
};

}} // eosio::testing
